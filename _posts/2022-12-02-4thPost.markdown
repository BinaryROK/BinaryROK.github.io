---
layout: post
title:  "네번째"
date:   2022-12-02 09:48:00 +0900
categories: jekyll update
---
네번째 출근
어제는 라즈베리파이 gpio를 통해 이것저것 해보려고 시도해봤다.<br/>
일단 라즈베리파이4에 gpio확장보드를 달고 기본적인 스위치 led 세븐세그먼트 제어를 하려고했는데 하루종일 못했다.<br/>
왜냐, 확장보드를 달았는데 제대로안달고 걸쳐놓고 계속 실행이 안되서 코드만 계속 만지작거리다가 깨달았다.<br/>
오늘은 어제못한 제어를 다시해봐야겠다.<br/>
그전에 gpio에대해서 다시 공부를 해보자<br/>

일단 gpio를 사용하려면 RPi.GPIO라는 패키지가 필요하다.
{% highlight ruby %}
sudo apt-get install RPi.GPIO /GPIO 패키지 인스톨
import RPi.GPIO as GPIO  / GPIO 함수 호출
{% endhighlight %}
후에 해야할것은 Numbering system을 설정하여 pin번호를 정하는것이다.<br/>
여기는 두가지로 구분할수있는데 첫번째는 GPIO.BOARD와 GPIO.BCM이있다.<br/>
BOARD는 물리적으로 40개의 핀을 순서대로 나열한것이고 BCN은 control, power, ground를 구분한것이다. 보통BCM으로한다.<br/>

{% highlight ruby %}
GPIO.setmode(GPIO.BCM) / 넘버링을 BCM으로 하겠다.
LED = 18
GPIO.setup(18(핀번호), GPIO.OUT, initail=GPIO.HIGH or LOW) / 핀에 아웃풋 지정
GPIO.output(LED, GPIO.HIGH or LOW) / 해당 핀의 아웃풋을 1 또는 0으로 변경

except KeyBoardInterrupt:
    pass     / ctrl c 하면 종료
GPIO.cleanup() / 해당 코드를 안넣으면 이후 사용시 핀이 사용중이라 사용못한다.

{% endhighlight %}

다음은 2초에 한번씩 켜지고꺼지는 GPIO LED제어 코드이다
{% highlight ruby %}
import RPi.GPIO as GPIO
#RPi.GPIO 패키지를 가져오고 쓰기 편하게 GPIO로 변경한다.
import time
#딜레이를 위한 시간 패키지

GPIO.setmode(GPIO.BCM)
#GPIO 핀모드를 BCM으로 설정
LED=17
#LED 가 들어가는 핀번호
GPIO.setup(LED, GPIO.OUT, initial=GPIO.HIGH)
#LED(17번)을 아웃풋으로 설정하고 초기값은 1로 설정

val= GPIO.input(LED)
#변수 val 도입 이는 LED핀의 현재상태를 의미함 True면1 False면0 
print(val)
#True면 1이출력되고 False면 0이출력된다.

try:
#try, except문 except에 있는 조건이 나오지않는한 try에있는 문장 실행
    while True:
    #while 조건문에 True를 넣으면 항상 참이기에 하위 문장을 계속반복(무한루프)
            GPIO.output(LED, GPIO.HIGH)
            #LED의 아웃풋을 HIGH로 설정하여 점등
            time.sleep(2)

            GPIO.output(LED, GPIO.LOW)
            #위와 동일, 소등
            time.sleep(2)

except KeyboardInterrupt: 
    pass
    #키보드인터럽트(ctrl c)가 실행될 경우 pass를 한다.
GPIO.cleanup()
#gpio에 해당된 핀들을 초기화한다. 해당문장이 없을경우 다음번실행시 해당 핀번호가 사용중이라는 경고문이 뜬다.
{% endhighlight %}

이번에는 인풋에 버튼을추가하여 버튼을 누르면 점등이 되고 손때면 소등이 되게 하였다.
{% highlight ruby %}
import RPi.GPIO as GPIO
import time

GPIO.setmode(GPIO.BCM)
but=27
led=17
GPIO.setup(but, GPIO.IN,pull_up_down =GPIO.PUD_DOWN)
# 버튼을 인풋으로 설정, 가만히있으면 0 위에서 아래로 누르면 1
GPIO.setup(led, GPIO.OUT,initial = GPIO.LOW)
val=GPIO.input(but)

try:
	while True:
		GPIO.output(led,GPIO.LOW)
		print("off")
		while GPIO.input(but)==1:
        #인풋이 1인경우 점등이되며 on 이출력된다.
			GPIO.output(led,GPIO.HIGH)
			print("on")
			time.sleep(0.5)

except KeyboardInterrupt:
	pass


GPIO.cleanup()


{% endhighlight %}






{% highlight ruby %}



{% endhighlight %}
